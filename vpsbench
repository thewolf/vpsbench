#!/bin/bash

#==============================================================================
# Copyright (c) 2013 Mario Gutierrez <mario@mgutz.com>
#
# Licensed under The MIT License
#==============================================================================


# Quick benchmark, always run
function bench_quick {
    local test_file=vpsbench__$$
    local tar_file=tarfile
    local now=$(date +"%m/%d/%Y")

    local cname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo )
    local cores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )
    local freq=$( awk -F: ' /cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo )
    local tram=$( free -m | awk 'NR==2 {print $2}' )
    local swap=$( free -m | awk 'NR==4 {print $2}' )
    local up=$(uptime|awk '{ $1=$2=$(NF-6)=$(NF-5)=$(NF-4)=$(NF-3)=$(NF-2)=$(NF-1)=$NF=""; print }')

    echo -n "Benching I/O ... "
    local io=$( ( dd if=/dev/zero of=$test_file bs=64k count=16k conv=fdatasync && rm -f $test_file ) 2>&1 | awk -F, '{io=$NF} END { print io}' )
    echo OK

    echo -n "Benching CPU. Bzipping 25MB file ... "
    dd if=/dev/urandom of=$tar_file bs=1024 count=25000 >>/dev/null 2>&1
    local tf=$( (/usr/bin/time -f "%es" tar cfj $tar_file.bz2 $tar_file) 2>&1 )
    rm -f tarfile*
    echo OK


_$now - VMPLAN - DATACENTER - OS - AUTHOR_
\`\`\`
CPU model: $cname
Number of cores: $cores
CPU frequency: $freq MHz
Total amount of RAM: $tram MB
Total amount of swap: $swap MB
System uptime: $up
I/O speed: $io
Bzip 25MB: $tf
Download 100MB file: $dl
\`\`\`


INFO

}

function _dl {
    wget -O /dev/null "$1" 2>&1 | awk '/\/dev\/null/ {speed=$3 $4} END {gsub(/\(|\)/,"",speed); print speed}'
}


# Bench a single download file.
function bench_dl {
    echo -n "Downloading from $1 ... "
    _dl "$2"
}



# Remove temporary files and directories used/created during benchmarking.
function remove_temporary_files {
    echo -n Removing temporary files ...
    rm -f vpsbench__*
    rm -f bigfile
    rm -rf UnixBench*
    rm -rf tarfile*
    echo OK
}


# Display usage.
function usage {
    cat <<USAGE
Usage: vpsbench [OPTION...]

-a Bench all
-d Bench downloads
-f Create 100M bigfile
-x Remove temporary files
-u Bench unixbench
USAGE
}


# The main script.
function main {
    bench_quick
}


# Parse command line options
while getopts :adfxut opt; do
    case "$opt" in
        a)
            do_downloads=true
            do_unixbench=true
            ;;
        d)
            do_downloads=true
            ;;
        f)
            create_big_file
            exit
            ;;
        x)
            remove_temporary_files
            exit
            ;;
        u)
            do_unixbench=true
            ;;
        t)
            do_downloads=false
            do_unixbench=false
            ;;
        ?)
            usage
            exit 2
            ;;
    esac
done

main

